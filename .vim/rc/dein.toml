[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'thinca/vim-template'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'thinca/vim-visualstar'

[[plugins]]
repo = 'othree/eregex.vim'
hook_add = '''
  nnoremap / :M/
  nnoremap ? :M?
  nnoremap ,/ /
  nnoremap ,? ?
'''

[[plugins]]
repo = 'mopp/autodirmake.vim'

[[plugins]]
repo = 'nanotech/jellybeans.vim'

# [[plugins]]
# repo = 'chriskempson/tomorrow-theme'
# rtp = 'vim'

[[plugins]]
repo = 'mopp/autodirmake.vim'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add  = '''
  let g:airline_powerline_fonts=1
  set laststatus=2
  let g:airline_theme='jellybeans'
'''

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = 'javascript'
hook_source = '''
  let g:used_javascript_libs = 'underscore,react'
'''

[[plugins]]
repo = 'moll/vim-node'
on_ft = 'javascript'
hook_add = '''
  autocmd User Node
        \ if &filetype == "javascript" |
        \   nnoremap <buffer> <C-w>f <Plug>NodeVSplitGotoFile |
        \   nnoremap <buffer> <C-w><C-f> <Plug>NodeVSplitGotoFile |
        \ endif
'''

[[plugins]]
repo = 'tpope/vim-commentary'
on_ft = 'all'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  nmap <Leader>r <Plug>(quickrun)
    let g:quickrun_config = {
          \ '_': {
          \   'runner': 'vimproc',
          \   'runner/vimproc/updatetime': 10,
          \ },
          \ 'go': {
          \   'command': 'go',
          \   'exec': ['%c run %s'],
          \ },
          \ 'markdown': {
          \   'outputter': 'browser'
          \ },
          \ 'javascript': {
          \   'command': 'node',
          \   'tempfile': '{tempname()}.js'
          \ },
          \ 'javascript/mocha': {
          \   'command': 'mocha',
          \   'tempfile': '{tempname()}.js'
          \ }}
'''

[[plugins]]
repo = 'scrooloose/syntastic'
if = '!has("nvim")'
hook_add = '''
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
  let g:syntastic_enable_signs=1
  let g:syntastic_auto_loc_list=2
  let g:syntastic_always_populate_loc_list=1
  let g:syntastic_css_checkers=['csslint']
  let g:syntastic_json_checkers=['jsonlint']
  let g:syntastic_javascript_checkers=['eslint']
  let g:syntastic_python_checkers = ['flake8']
  let g:syntastic_html_tidy_ignore_errors=[' proprietary attribute "ng-']
  let g:syntastic_go_checkers = ['go', 'golint', 'govet']
  let g:syntastic_error_symbol = 'âœ•'
  let g:syntastic_style_error_symbol = 'âœ•'
  let g:syntastic_warning_symbol = 'â–³'
  let g:syntastic_style_warning_symbol = 'â–³'
  highlight link SyntasticErrorSign SignColumn
  highlight link SyntasticWarningSign SignColumn
  highlight link SyntasticStyleErrorSign SignColumn
  highlight link SyntasticStyleWarningSign SignColumn
'''

[[plugins]]
repo = 'neomake/neomake'
if = 'has("nvim")'
hook_add = '''
  autocmd! BufWritePost * Neomake
  let g:neomake_javascript_enabled_makers = ['eslint']
  let g:neomake_go_enabled_makers = ['golint', 'govet', 'errcheck']
  let g:neomake_warning_sign = {
    \ 'text': 'ðŸ’©',
    \ 'texthl': 'WarningMsg',
    \ }
  let g:neomake_error_sign = {
    \ 'text': 'ðŸ”¥',
    \ 'texthl': 'ErrorMsg',
    \ }
'''

