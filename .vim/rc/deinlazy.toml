[[plugins]]
repo = 'Shougo/neoyank.vim'
on_path = '.*'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
disabled = '!has("lua")'
on_i = 1
hook_source = '''
  let g:loaded_deoplete = 1
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ }

  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif

  if !exists('g:neocomplete#sources#omni#functions')
    let g:neocomplete#sources#omni#functions = {}
  endif

  let g:neocomplete#sources#omni#functions.cs = [
        \ 'OmniSharp#Complete',
        \ ]
  " 'tern#Complete',
  let g:neocomplete#sources#omni#functions.javascript = [
        \ 'tern#Complete',
        \ 'javascriptcomplete#CompleteJS',
        \ ]

  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif

  let g:neocomplete#sources#omni#input_patterns.go = '[^.[:digit:] *\t]\.\w*'
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_smart_case = 1

  inoremap <expr><C-h> deolete#mappings#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> deoplete#mappings#smart_close_popup()."\<C-h>"

  """ deoplete-go
  let g:deoplete#sources#go#align_class = 1
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
  let g:deoplete#sources#go#package_dot = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
on_ft = 'snippet'
hook_source = '''
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \ : pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \ : "\<TAB>"
  let g:neosnippet#snippets_directory = '~/snippets'
  let g:neosnippet#disable_runtime_snippets = {
        \ 'javascript' : 1,
        \ }
'''

[[plugins]]
repo = 'zchee/deoplete-go'
build = 'make'
on_i = 1
on_ft = 'go'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1
on_ft = 'snippet'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
on_i = 1
hook_source = '''
  let g:unite_enable_start_insert = 1
  let g:unite_options_auto_highlight = 1
  let g:unite_source_rec_async_command = [
    \ 'ag', '--follow', '--nocolor', '--nogroup',
    \  '--hidden', '-g', '']
  " let g:unite_source_rec_find_args = [
  "   \ '-regex', '".*/\."', '-o', '-path', '"*node_modules',
  "   \ '-prune', '-o', '-type', 'l', '-print']
  " let g:unite_source_rec_max_cache_files=20000
  " let g:unite_source_rec_min_cache_files=100
  nnoremap [Unite] <Nop>
  nmap <Space> [Unite]
  imap <C-c> <Plug>(unite_exit)
  nmap <C-c> <Plug>(unite_exit)

  function! DispatchUniteFileRec()
    if isdirectory(getcwd()."/.git")
      Unite file_rec/git
    else
      Unite file_rec/async
    endif
  endfunction

  nnoremap <silent> [Unite]b :<C-u>Unite buffer<CR>
  nnoremap <silent> [Unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
  nnoremap <silent> [Unite]r :<C-u>Unite -buffer-name=register register<CR>
  nnoremap <silent> [Unite]h :<C-u>Unite file_mru<CR>
  nnoremap <silent> [Unite]p :<C-u>call DispatchUniteFileRec()<CR>
  nnoremap <silent> [Unite]<Space> :<C-u>UniteResume<CR>
  nnoremap <silent> [Unite]g :<C-u>Unite -no-quit -winheight=10 grep:<CR>
  nnoremap <silent> [Unite]q :<C-u>Unite -no-quit location_list -winheight=10<CR>
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '-S --nocolor --nogroup'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_max_candidates = 200

  " 選択した文字列をunite-grep
  " https://github.com/shingokatsushima/dotfiles/blob/master/.vimrc
  vnoremap /g y:Unite grep::-i:<C-R>=escape(@", '\\.*$^[]')<CR><CR>

  nnoremap <silent> [Unite]l :<C-u>Unite line<CR>
  nnoremap <silent> [Unite]j :<C-u>Unite jump<CR>
  nnoremap <silent> [Unite]o :<C-u>Unite -winheight=15 outline<CR>
  nnoremap <silent> [Unite]c :<C-u>Unite history/command<CR>
  nnoremap <silent> [Unite]s :<C-u>Unite history/search<CR>
  nnoremap <silent> [Unite]y :<C-u>Unite history/yank<CR>
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'unite.vim'

[[plugins]]
repo = 'thinca/vim-unite-history'
on_source = 'unite.vim'

[[plugins]]
repo = 'osyo-manga/unite-quickfix'
on_source = 'unite.vim'

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['unite', 'quickfix']

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
  let g:go_fmt_command = 'goimports'
  let s:goargs = go#package#ImportPath(expand('%:p:h'))
  let g:neomake_go_errcheck_maker = {
    \ 'args': ['-abspath', s:goargs],
    \ 'append_file': 0,
    \ 'errorformat': '%f:%l:%c:\ %m, %f:%l:%c\ %#%m',
    \ }
  let g:neomake_go_enabled_makers = ['golint', 'govet', 'errcheck']
  let g:go_disable_autoinstall = 0
  let g:go_fmt_autosave = 0
  let g:go_fmt_fail_silently = 1 " use syntasitic to check errors
  let g:go_play_open_browser = 0
  let g:go_snippet_engine = 'neosnippet'

  augroup MyGoAutocmd
    au!
    au FileType go nmap <LocalLeader>i <Plug>(go-info)
    au FileType go nmap <LocalLeader>gd <Plug>(go-doc)
    au FileType go nmap <LocalLeader>gv <Plug>(go-doc-vertical)
    au FileType go nmap <LocalLeader>r <Plug>(go-run)
    au FileType go nmap <LocalLeader>b <Plug>(go-build)
    au FileType go nmap <LocalLeader>t <Plug>(go-test)
    au FileType go nmap <LocalLeader>c <Plug>(go-coverage)
    au FileType go nmap <LocalLeader>gb <Plug>(go-build)
    au FileType go nmap <LocalLeader>gt <Plug>(go-test)
    " au FileType go nmap <LocalLeader>d <Plug>(go-def)
    au FileType go nmap <LocalLeader>ds <Plug>(go-def-split)
    au FileType go nmap <LocalLeader>dv <Plug>(go-def-vertical)
    au FileType go nmap <LocalLeader>gl :GoLint<CR>
  augroup END
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'ternjs/tern_for_vim'
on_ft = 'javascript'
build = 'npm install'
hook_source = '''
  nnoremap <LocalLeader>tt :TernType<CR>
  nnoremap <LocalLeader>td :TernDef<CR>
  nnoremap <LocalLeader>tpd :TernDefPreview<CR>
  nnoremap <LocalLeader>tsd :TernDefSplit<CR>
  nnoremap <LocalLeader>ttd :TernDefTab<CR>
  nnoremap <LocalLeader>tr :TernRefs<CR>:lclose<CR>:Unite -no-quit -winheight=10 location_list<CR>
  nnoremap <LocalLeader>tR :TernRename<CR>
  nnoremap <LocalLeader>j :TernDef<CR>f'gf
  let g:tern_show_argument_hints='on_hold'
'''

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'

[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'digitaltoad/vim-jade'
on_ft = 'jade'

[[plugins]]
repo = 'thinca/vim-ft-svn_diff'

[[plugins]]
repo = 'heavenshell/vim-jsdoc'
on_ft = 'javascript'
hook_source = '''
  let g:jsdoc_default_mapping=0
  nnoremap <silent> <C-J> :JsDoc<CR>
  nnoremap <silent> <C-Q> :JsDoc<CR>
'''

[[plugins]]
repo = 'stephpy/vim-yaml'
on_ft = 'yaml'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript-vim'

[[plugins]]
repo = 'chrisbra/vim-diff-enhanced'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'
on_ft = 'jinja'

[[plugins]]
repo = 'pearofducks/ansible-vim'
on_ft = 'yaml'

